name: Project CI

on:
  push:
    branches: [ dev ]
    paths-ignore: 
      - 'README.md'
      - '.gitignore'
      - '.github/**'
  pull_request:
    paths-ignore: 
      - 'README.md'
      - '.gitignore'
      - '.github/**'
    branches: [ dev ]
    
  workflow_dispatch:

jobs:
  test_frontend:
    name: Test frontend
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    # Temp disable test since we don't have one yet
    # - run: npm test
    # Upload built js code directory to dokku and then the predeploy script in
    # in dokku will copy it to the app directory
    - name: Upload built main.js folder to server
      uses: garygrossgarten/github-action-scp@release
      with:
        host: ${{ secrets.DOKKU_HOST }}
        username: ${{ secrets.UPLOAD_USER }}
        privateKey: ${{ secrets.SSH_PRIVATE_KEY_UPLOAD }}
        port: ${{ secrets.DOKKU_SSH_PORT }}
        local: "frontend/static/frontend/"
        remote: ${{ secrets.DOKKU_HOMIEHOMIE_STORAGE_DIR }}
        recursive: true
        rmRemote: true
      
  test_backend:
    name: Test backend
    runs-on: ubuntu-latest
    
    # Postgres setup
    services:
      postgres: 
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432 
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        npm i
        npm run build
    - name: Run Coverage and Unit test
      run: |
        python manage.py collectstatic --noinput
        make coverage_dev
      env:
        # Fake SECRET KEY used for run test only 
        HOMIE_HOMIE_DJANGO_SECRET_KEY: wtelrbj_4zy@(16_f0vvvxa85i4otovka)a)651ccxm7ng9tuv
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/action
        COVERAGE_PROCESS_START: .coveragerc
    - name: Generate coverage report 
      run: |
        make coverage-report_xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests,django
        env_vars: PYTHON
        name: codecov-django
        fail_ci_if_error: true
        verbose: false
  deploy_test:
    # TODO Ignore deploy on pull request and commit with [skip deploy]
    # Current deploy only when message contains `[deploy]`
    if: "contains(toJSON(github.event.commits.*.message), '[deploy]') && !contains(github.event.action, 'pull_request')"
    name: Deploy code to test server via dokku
    runs-on: ubuntu-latest
    needs: [test_backend, test_frontend]
    steps:
      - name: Cloning repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Deploy Test Server
        # You may pin to the exact commit or the version.
        # uses: dokku/github-action@f3dfd4bae85d064232999f269c271bfd0e45c2e8
        uses: dokku/github-action@0.0.11
        with:
          # The branch to deploy when pushing to Dokku (default: master)
          branch: master # optional, default is master
          # The command to run for the action (default: detected from GITHUB_REF)
          ci_branch_name: main # optional, default is 
          # The commit sha that will be pushed (default: detected from GITHUB_SHA)
          # A string containing a set of flags to set on push
          # The dokku app's git repository url (in SSH format)
          git_remote_url: ${{ format('ssh://dokku@{0}:{1}/test-homiehomie', secrets.DOKKU_HOST, secrets.DOKKU_SSH_PORT) }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

